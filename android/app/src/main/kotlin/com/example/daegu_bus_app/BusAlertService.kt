package com.example.daegu_bus_app

import io.flutter.plugin.common.MethodChannel
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Context
import android.content.Intent
import android.media.AudioAttributes
import android.net.Uri
import android.os.Build
import android.os.IBinder
import android.util.Log
import android.graphics.Color
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import kotlinx.coroutines.*
import java.util.Timer
import java.util.TimerTask

class BusAlertService : Service() {
    companion object {
        private const val TAG = "BusAlertService"
        private const val CHANNEL_BUS_ALERTS = "bus_alerts"
        private const val CHANNEL_BUS_ONGOING = "bus_ongoing"
        const val ONGOING_NOTIFICATION_ID = 10000
        
        @Volatile
        private var instance: BusAlertService? = null
        
        fun getInstance(context: Context): BusAlertService {
            return instance ?: synchronized(this) {
                instance ?: BusAlertService().also { 
                    it.initialize(context)
                    instance = it
                }
            }
        }
    }
    
    private var _methodChannel: MethodChannel? = null
    private val serviceScope = CoroutineScope(Dispatchers.Main + SupervisorJob())
    private lateinit var context: Context
    private lateinit var busApiService: BusApiService
    private var monitoringJob: Job? = null
    private val monitoredRoutes = mutableMapOf<String, Pair<String, String>>() // routeId -> (stationId, stationName)
    private val timer = Timer()
    
    // Ï∂îÏ†Å Î™®Îìú ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    private var _isInTrackingMode = false
    val isInTrackingMode: Boolean
        get() = _isInTrackingMode || monitoredRoutes.isNotEmpty()

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    override fun onCreate() {
        super.onCreate()
        busApiService = BusApiService(this)
    }
    
    fun initialize(context: Context? = null, flutterEngine: io.flutter.embedding.engine.FlutterEngine? = null) {
        try {
            val actualContext = context ?: this.context
            if (actualContext == null) {
                Log.e(TAG, "üîî Ïª®ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÏñ¥ ÏïåÎ¶º ÏÑúÎπÑÏä§Î•º Ï¥àÍ∏∞ÌôîÌï† Ïàò ÏóÜÏäµÎãàÎã§")
                return
            }
            this.context = actualContext.applicationContext
            Log.d(TAG, "üîî ÏïåÎ¶º ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî")
            createNotificationChannels()
            checkNotificationPermission()
            
            if (flutterEngine != null) {
                _methodChannel = MethodChannel(
                    flutterEngine.dartExecutor.binaryMessenger,
                    "com.example.daegu_bus_app/bus_api"
                )
                Log.d(TAG, "üîå Î©îÏÑúÎìú Ï±ÑÎÑê Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            } else {
                Log.d(TAG, "‚ö†Ô∏è FlutterEngineÏù¥ Ï†ÑÎã¨ÎêòÏßÄ ÏïäÏïÑ Î©îÏÑúÎìú Ï±ÑÎÑêÏùÑ Ï¥àÍ∏∞ÌôîÌï† Ïàò ÏóÜÏäµÎãàÎã§")
            }
        } catch (e: Exception) {
            Log.e(TAG, "üîî ÏïåÎ¶º ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}", e)
        }
    }
        
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            try {
                val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
                
                val busAlertsChannel = NotificationChannel(
                    CHANNEL_BUS_ALERTS,
                    "Bus Alerts",
                    NotificationManager.IMPORTANCE_HIGH
                ).apply {
                    description = "Î≤ÑÏä§ ÎèÑÏ∞© ÏïåÎ¶º"
                    enableLights(true)
                    lightColor = Color.RED
                    enableVibration(true)
                    val soundUri = Uri.parse("android.resource://${context.packageName}/raw/alarm_sound")
                    val audioAttributes = AudioAttributes.Builder()
                        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                        .setUsage(AudioAttributes.USAGE_NOTIFICATION_EVENT)
                        .build()
                    setSound(soundUri, audioAttributes)
                }
                
                val busOngoingChannel = NotificationChannel(
                    CHANNEL_BUS_ONGOING,
                    "Bus Tracking",
                    NotificationManager.IMPORTANCE_LOW
                ).apply {
                    description = "Î≤ÑÏä§ ÏúÑÏπò Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å"
                    enableLights(false)
                    enableVibration(false)
                }
                
                notificationManager.createNotificationChannel(busAlertsChannel)
                notificationManager.createNotificationChannel(busOngoingChannel)
                Log.d(TAG, "üîî ÏïåÎ¶º Ï±ÑÎÑê ÏÉùÏÑ± ÏôÑÎ£å")
            } catch (e: Exception) {
                Log.e(TAG, "üîî ÏïåÎ¶º Ï±ÑÎÑê ÏÉùÏÑ± Ïò§Î•ò: ${e.message}", e)
            }
        }
    }
    
    private fun checkNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            Log.d(TAG, "Android 13+ ÏïåÎ¶º Í∂åÌïú ÌôïÏù∏ ÌïÑÏöî")
        }
    }
    
    fun registerBusArrivalReceiver() {
        try {
            Log.d(TAG, "üîî Î≤ÑÏä§ ÎèÑÏ∞© Ïù¥Î≤§Ìä∏ Î¶¨ÏãúÎ≤Ñ Îì±Î°ù ÏãúÏûë")
            
            // ÌòÑÏû¨ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù∏ ÎÖ∏ÏÑ† Î°úÍπÖ
            if (monitoredRoutes.isEmpty()) {
                Log.e(TAG, "üîî Î™®ÎãàÌÑ∞ÎßÅÌï† ÎÖ∏ÏÑ†Ïù¥ ÏóÜÏäµÎãàÎã§. ÏÑúÎπÑÏä§Î•º ÏãúÏûëÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
                return
            }
            
            Log.d(TAG, "üîî Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù∏ ÎÖ∏ÏÑ† Î™©Î°ù: ${monitoredRoutes.keys.joinToString()}")
            
            monitoringJob?.cancel()
            monitoringJob = serviceScope.launch {
                timer.scheduleAtFixedRate(object : TimerTask() {
                    override fun run() {
                        serviceScope.launch {
                            checkBusArrivals()
                        }
                    }
                }, 0, 15000)
            }
            
            _isInTrackingMode = true
            _methodChannel?.invokeMethod("onBusMonitoringStarted", null)
            Log.d(TAG, "üîî Î≤ÑÏä§ ÎèÑÏ∞© Ïù¥Î≤§Ìä∏ Î¶¨ÏãúÎ≤Ñ Îì±Î°ù ÏôÑÎ£å")
        } catch (e: Exception) {
            Log.e(TAG, "üîî Î≤ÑÏä§ ÎèÑÏ∞© Ïù¥Î≤§Ìä∏ Î¶¨ÏãúÎ≤Ñ Îì±Î°ù Ïò§Î•ò: ${e.message}", e)
            throw e
        }
    }

    private fun parseEstimatedTime(estimatedTime: String): Int {
        return when {
            estimatedTime == "-" || estimatedTime == "Ïö¥ÌñâÏ¢ÖÎ£å" -> -1
            estimatedTime.contains("Î∂Ñ") -> {
                val minutesStr = estimatedTime.replace("[^0-9]".toRegex(), "")
                minutesStr.toIntOrNull() ?: -1
            }
            else -> -1
        }
    }

    private suspend fun checkBusArrivals() {
        try {
            if (monitoredRoutes.isEmpty()) {
                Log.d(TAG, "üîî Î™®ÎãàÌÑ∞ÎßÅÌï† ÎÖ∏ÏÑ†Ïù¥ ÏóÜÏäµÎãàÎã§")
                return
            }

            for ((routeId, pair) in monitoredRoutes) {
                val (stationId, stationName) = pair
                Log.d(TAG, "üîî Î≤ÑÏä§ ÎèÑÏ∞© Ï†ïÎ≥¥ ÌôïÏù∏: routeId=$routeId, stationId=$stationId")

                val arrivalInfo = busApiService.getBusArrivalInfoByRouteId(stationId, routeId)
                if (arrivalInfo != null && arrivalInfo.bus.isNotEmpty()) {
                    val busInfo = arrivalInfo.bus[0] // Ï≤´ Î≤àÏß∏ Î≤ÑÏä§ Ï†ïÎ≥¥ ÏÇ¨Ïö©
                    val busNo = arrivalInfo.name
                    val currentStation = busInfo.currentStation
                    val remainingTime = parseEstimatedTime(busInfo.estimatedTime)

                    Log.d(TAG, "üîî ÎèÑÏ∞© Ï†ïÎ≥¥: $busNo, $stationName, ÎÇ®ÏùÄ ÏãúÍ∞Ñ: $remainingTime Î∂Ñ, ÌòÑÏû¨ ÏúÑÏπò: $currentStation")
                    
                    // ÎèÑÏ∞© ÏûÑÎ∞ï ÏïåÎ¶º (0~2Î∂Ñ)
                    if (remainingTime in 0..2) {
                        withContext(Dispatchers.Main) {
                            showBusArrivingSoon(busNo, stationName, currentStation)
                            _methodChannel?.invokeMethod(
                                "onBusArrival",
                                mapOf(
                                    "busNumber" to busNo,
                                    "stationName" to stationName,
                                    "currentStation" to currentStation,
                                    "routeId" to routeId
                                ).toString()
                            )
                        }
                    } 
                    // Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å ÏïåÎ¶º ÏóÖÎç∞Ïù¥Ìä∏ (2Î∂Ñ Ïù¥ÏÉÅ)
                    else if (remainingTime > 2) {
                        withContext(Dispatchers.Main) {
                            // isUpdateÎ•º trueÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Í∏∞Ï°¥ ÏïåÎ¶º ÏóÖÎç∞Ïù¥Ìä∏
                            showOngoingBusTracking(busNo, stationName, remainingTime, currentStation, true)
                            
                            // Ïï±ÏóêÎèÑ ÏóÖÎç∞Ïù¥Ìä∏Îêú Ï†ïÎ≥¥ Ï†ÑÎã¨
                            _methodChannel?.invokeMethod(
                                "onBusLocationUpdate",
                                mapOf(
                                    "busNumber" to busNo,
                                    "stationName" to stationName,
                                    "currentStation" to currentStation,
                                    "remainingMinutes" to remainingTime,
                                    "routeId" to routeId
                                ).toString()
                            )
                        }
                    }
                } else {
                    Log.d(TAG, "üîî ÎèÑÏ∞© Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§: routeId=$routeId, stationId=$stationId")
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "üîî Î≤ÑÏä§ ÎèÑÏ∞© Ï†ïÎ≥¥ ÌôïÏù∏ Ïò§Î•ò: ${e.message}", e)
        }
    }

    fun addMonitoredRoute(routeId: String, stationId: String, stationName: String) {
        // Î°úÍ∑∏ Ï∂îÍ∞Ä
        Log.d(TAG, "üîî Î™®ÎãàÌÑ∞ÎßÅ ÎÖ∏ÏÑ† Ï∂îÍ∞Ä ÏöîÏ≤≠: routeId=$routeId, stationId=$stationId, stationName=$stationName")
        
        if (routeId.isEmpty() || stationId.isEmpty() || stationName.isEmpty()) {
            Log.e(TAG, "üîî Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌååÎùºÎØ∏ÌÑ∞: routeId=$routeId, stationId=$stationId, stationName=$stationName")
            return
        }
        
        monitoredRoutes[routeId] = Pair(stationId, stationName)
        Log.d(TAG, "üîî Î™®ÎãàÌÑ∞ÎßÅ ÎÖ∏ÏÑ† Ï∂îÍ∞Ä ÏôÑÎ£å: routeId=$routeId, stationId=$stationId, stationName=$stationName")
        Log.d(TAG, "üîî ÌòÑÏû¨ Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏù∏ ÎÖ∏ÏÑ† Ïàò: ${monitoredRoutes.size}Í∞ú")
        
        // Î™®ÎãàÌÑ∞ÎßÅ ÎÖ∏ÏÑ† Ï∂îÍ∞Ä ÌõÑ Ï¶âÏãú ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
        if (!_isInTrackingMode) {
            registerBusArrivalReceiver()
        }
    }
    
    // Ï∂îÍ∞Ä ÎèÑÏö∞ÎØ∏ Î©îÏÑúÎìú
    fun getMonitoredRoutesCount(): Int {
        return monitoredRoutes.size
    }

    fun showNotification(
        id: Int,
        busNo: String,
        stationName: String,
        remainingMinutes: Int,
        currentStation: String? = null,
        payload: String? = null
    ) {
        serviceScope.launch {
            try {
                Log.d(TAG, "üîî ÏïåÎ¶º ÌëúÏãú ÏãúÎèÑ: $busNo, $stationName, ${remainingMinutes}Î∂Ñ, ID: $id")
                val title = "${busNo}Î≤à Î≤ÑÏä§ ÏäπÏ∞® ÏïåÎ¶º"
                var body = "${stationName} Ï†ïÎ•òÏû• - ÏïΩ ${remainingMinutes}Î∂Ñ ÌõÑ ÎèÑÏ∞©"
                if (!currentStation.isNullOrEmpty()) {
                    body += " (ÌòÑÏû¨ ÏúÑÏπò: $currentStation)"
                }
                val intent = Intent(context, MainActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                    putExtra("NOTIFICATION_ID", id)
                    putExtra("PAYLOAD", payload)
                }
                val pendingIntent = PendingIntent.getActivity(
                    context, 
                    id, 
                    intent, 
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
                val dismissIntent = Intent(context, NotificationDismissReceiver::class.java).apply {
                    putExtra("NOTIFICATION_ID", id)
                }
                val dismissPendingIntent = PendingIntent.getBroadcast(
                    context,
                    id + 1000,
                    dismissIntent,
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
                val builder = NotificationCompat.Builder(context, CHANNEL_BUS_ALERTS)
                    .setSmallIcon(R.drawable.ic_bus_notification)
                    .setContentTitle(title)
                    .setContentText(body)
                    .setStyle(NotificationCompat.BigTextStyle().bigText(body))
                    .setPriority(NotificationCompat.PRIORITY_MAX)
                    .setCategory(NotificationCompat.CATEGORY_ALARM)
                    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                    .setColor(ContextCompat.getColor(context, R.color.notification_color))
                    .setColorized(true)
                    .setAutoCancel(false)
                    .setOngoing(true)
                    .setContentIntent(pendingIntent)
                    .setSound(Uri.parse("android.resource://${context.packageName}/raw/alarm_sound"))
                    .setVibrate(longArrayOf(0, 500, 200, 500, 200, 500))
                    .addAction(R.drawable.ic_dismiss, "ÏïåÎûå Ï¢ÖÎ£å", dismissPendingIntent)
                    .setFullScreenIntent(pendingIntent, true)
                with(NotificationManagerCompat.from(context)) {
                    try {
                        notify(id, builder.build())
                        Log.d(TAG, "üîî ÏïåÎ¶º ÌëúÏãú ÏôÑÎ£å: $id")
                    } catch (e: SecurityException) {
                        Log.e(TAG, "üîî ÏïåÎ¶º Í∂åÌïú ÏóÜÏùå: ${e.message}", e)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "üîî ÏïåÎ¶º ÌëúÏãú Ïò§Î•ò: ${e.message}", e)
            }
        }
    }
    
    fun showOngoingBusTracking(
        busNo: String,
        stationName: String,
        remainingMinutes: Int,
        currentStation: String? = null,
        isUpdate: Boolean = false
    ) {
        try {
            // Í∏∞Î°ù ÎÇ®Í∏∞Í∏∞ - ÎîîÎ≤ÑÍ∑∏Ïö©
            Log.d(TAG, "üöå Î≤ÑÏä§ Ï∂îÏ†Å ÏïåÎ¶º ${if (isUpdate) "ÏóÖÎç∞Ïù¥Ìä∏" else "ÏãúÏûë"}: $busNo, $stationName, ÎÇ®ÏùÄ ÏãúÍ∞Ñ: $remainingMinutes Î∂Ñ, ÌòÑÏû¨ ÏúÑÏπò: $currentStation, ÏóÖÎç∞Ïù¥Ìä∏: $isUpdate")

            val title = "${busNo}Î≤à Î≤ÑÏä§ Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å"
            val body = if (remainingMinutes <= 0) {
                "$stationName Ï†ïÎ•òÏû•Ïóê Í≥ß ÎèÑÏ∞©Ìï©ÎãàÎã§!"
            } else {
                "$stationName Ï†ïÎ•òÏû•ÍπåÏßÄ ÏïΩ ${remainingMinutes}Î∂Ñ ÎÇ®ÏïòÏäµÎãàÎã§." +
                    if (!currentStation.isNullOrEmpty()) " (ÌòÑÏû¨ ÏúÑÏπò: $currentStation)" else ""
            }

            val intent = Intent(context, MainActivity::class.java).apply {
                flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                putExtra("NOTIFICATION_ID", ONGOING_NOTIFICATION_ID)
                putExtra("PAYLOAD", "bus_tracking_$busNo")
                // Ï∂îÍ∞Ä Ï†ïÎ≥¥ÎèÑ IntentÏóê Ìè¨Ìï®
                putExtra("BUS_NUMBER", busNo)
                putExtra("STATION_NAME", stationName)
                putExtra("REMAINING_MINUTES", remainingMinutes)
                putExtra("CURRENT_STATION", currentStation)
            }
            val pendingIntent = PendingIntent.getActivity(
                context,
                ONGOING_NOTIFICATION_ID,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            val stopTrackingIntent = Intent(context, NotificationDismissReceiver::class.java).apply {
                putExtra("NOTIFICATION_ID", ONGOING_NOTIFICATION_ID)
                putExtra("STOP_TRACKING", true)
            }
            val stopTrackingPendingIntent = PendingIntent.getBroadcast(
                context,
                ONGOING_NOTIFICATION_ID + 1000,
                stopTrackingIntent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            // ÎÇ®ÏùÄ ÏãúÍ∞ÑÏóê Îî∞Îùº ÏßÑÌñâÎ•† Í≥ÑÏÇ∞ (ÏµúÎåÄ 30Î∂ÑÏùÑ 100%Î°ú ÏÑ§Ï†ï)
            val progress = 100 - (if (remainingMinutes > 30) 0 else remainingMinutes * 3)

            val builder = NotificationCompat.Builder(context, CHANNEL_BUS_ONGOING)
                .setSmallIcon(R.drawable.ic_bus_notification)
                .setContentTitle(title)
                .setContentText(body)
                .setStyle(NotificationCompat.BigTextStyle().bigText(body))
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setCategory(NotificationCompat.CATEGORY_SERVICE)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setColor(ContextCompat.getColor(context, R.color.tracking_color))
                .setColorized(true)
                .setAutoCancel(false)
                .setOngoing(true)
                .setOnlyAlertOnce(false) // ÏïåÎ¶º Î≥ÄÍ≤Ω Ïãú ÏÜåÎ¶¨/ÏßÑÎèô ÏÑ§Ï†ï (falseÎ©¥ Îß§Î≤à ÏïåÎ¶º)
                .setContentIntent(pendingIntent)
                .setProgress(100, progress, false)
                .addAction(R.drawable.ic_stop, "Ï∂îÏ†Å Ï§ëÏßÄ", stopTrackingPendingIntent)
                // ÌÉÄÏù¥Î®∏ ÌëúÏãú - Ï∂îÏ†Å ÏãúÏûë ÏãúÍ∞ÑÎ∂ÄÌÑ∞ Í≤ΩÍ≥º ÏãúÍ∞ÑÏùÑ Î≥¥Ïó¨Ï§å
                .setUsesChronometer(true)
                // ÏïåÎ¶º ÏãúÍ∞Ñ ÏÑ§Ï†ï - Îß§Î≤à ÌòÑÏû¨ ÏãúÍ∞ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏó¨ ÏµúÏã† Ï†ïÎ≥¥ÏûÑÏùÑ ÌëúÏãú
                .setWhen(System.currentTimeMillis())

            NotificationManagerCompat.from(context).notify(ONGOING_NOTIFICATION_ID, builder.build())
            Log.d(TAG, "üöå Î≤ÑÏä§ Ï∂îÏ†Å ÏïåÎ¶º ÌëúÏãú ÏôÑÎ£å: ÎÇ®ÏùÄ ÏãúÍ∞Ñ $remainingMinutes Î∂Ñ, ÌòÑÏû¨ ÏúÑÏπò: $currentStation")
        } catch (e: SecurityException) {
            Log.e(TAG, "üöå ÏïåÎ¶º Í∂åÌïú ÏóÜÏùå: ${e.message}", e)
        } catch (e: Exception) {
            Log.e(TAG, "üöå Î≤ÑÏä§ Ï∂îÏ†Å ÏïåÎ¶º Ïò§Î•ò: ${e.message}", e)
        }
    }

    fun showBusArrivingSoon(
        busNo: String,
        stationName: String,
        currentStation: String? = null
    ) {
        serviceScope.launch {
            try {
                Log.d(TAG, "üö® Î≤ÑÏä§ ÎèÑÏ∞© ÏûÑÎ∞ï ÏïåÎ¶º ÌëúÏãú ÏãúÎèÑ: $busNo")
                val title = "‚ö†Ô∏è ${busNo}Î≤à Î≤ÑÏä§ Í≥ß ÎèÑÏ∞©!"
                var body = "$stationName Ï†ïÎ•òÏû•Ïóê Í≥ß ÎèÑÏ∞©Ìï©ÎãàÎã§! ÌÉëÏäπ Ï§ÄÎπÑÌïòÏÑ∏Ïöî."
                if (!currentStation.isNullOrEmpty()) {
                    body += " ÌòÑÏû¨ ÏúÑÏπò: $currentStation"
                }
                val intent = Intent(context, MainActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                }
                val pendingIntent = PendingIntent.getActivity(
                    context, 
                    busNo.hashCode(), 
                    intent, 
                    PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                )
                val builder = NotificationCompat.Builder(context, CHANNEL_BUS_ALERTS)
                    .setSmallIcon(R.drawable.ic_bus_notification)
                    .setContentTitle(title)
                    .setContentText(body)
                    .setStyle(NotificationCompat.BigTextStyle().bigText(body))
                    .setPriority(NotificationCompat.PRIORITY_MAX)
                    .setCategory(NotificationCompat.CATEGORY_ALARM)
                    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                    .setColor(Color.RED)
                    .setColorized(true)
                    .setAutoCancel(false)
                    .setContentIntent(pendingIntent)
                    .setSound(Uri.parse("android.resource://${context.packageName}/raw/alarm_sound"))
                    .setVibrate(longArrayOf(0, 500, 200, 500, 200, 500))
                    .setLights(Color.RED, 1000, 500)
                    .setFullScreenIntent(pendingIntent, true)
                with(NotificationManagerCompat.from(context)) {
                    try {
                        notify(busNo.hashCode(), builder.build())
                        Log.d(TAG, "üö® Î≤ÑÏä§ ÎèÑÏ∞© ÏûÑÎ∞ï ÏïåÎ¶º ÌëúÏãú ÏôÑÎ£å: $busNo")
                    } catch (e: SecurityException) {
                        Log.e(TAG, "üö® ÏïåÎ¶º Í∂åÌïú ÏóÜÏùå: ${e.message}", e)
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "üö® Î≤ÑÏä§ ÎèÑÏ∞© ÏûÑÎ∞ï ÏïåÎ¶º Ïò§Î•ò: ${e.message}", e)
            }
        }
    }
    
    fun cancelNotification(id: Int) {
        try {
            NotificationManagerCompat.from(context).cancel(id)
            Log.d(TAG, "üîî ÏïåÎ¶º Ï∑®ÏÜå ÏôÑÎ£å: $id")
        } catch (e: Exception) {
            Log.e(TAG, "üîî ÏïåÎ¶º Ï∑®ÏÜå Ïò§Î•ò: ${e.message}", e)
        }
    }
    
    fun cancelOngoingTracking() {
        try {
            NotificationManagerCompat.from(context).cancel(ONGOING_NOTIFICATION_ID)
            _methodChannel?.invokeMethod("onTrackingCancelled", null)
            Log.d(TAG, "üöå ÏßÄÏÜçÏ†ÅÏù∏ Ï∂îÏ†Å ÏïåÎ¶º Ï∑®ÏÜå ÏôÑÎ£å")
        } catch (e: Exception) {
            Log.e(TAG, "üöå ÏßÄÏÜçÏ†ÅÏù∏ Ï∂îÏ†Å ÏïåÎ¶º Ï∑®ÏÜå Ïò§Î•ò: ${e.message}", e)
        }
    }
    
    fun cancelAllNotifications() {
        try {
            NotificationManagerCompat.from(context).cancelAll()
            Log.d(TAG, "üîî Î™®Îì† ÏïåÎ¶º Ï∑®ÏÜå ÏôÑÎ£å")
        } catch (e: Exception) {
            Log.e(TAG, "üîî Î™®Îì† ÏïåÎ¶º Ï∑®ÏÜå Ïò§Î•ò: ${e.message}", e)
        }
    }
    
    fun showTestNotification() {
        showNotification(
            id = 9999,
            busNo = "ÌÖåÏä§Ìä∏",
            stationName = "ÌÖåÏä§Ìä∏ Ï†ïÎ•òÏû•",
            remainingMinutes = 3,
            currentStation = "ÌÖåÏä§Ìä∏ Ï§ë"
        )
    }
    
    fun stopTracking() {
        cancelOngoingTracking()
        try {
            _methodChannel?.invokeMethod("stopBusMonitoringService", null)
            monitoringJob?.cancel()
            monitoredRoutes.clear()
            timer.cancel()
            _isInTrackingMode = false
            Log.d(TAG, "stopTracking() Ìò∏Ï∂úÎê®: Î≤ÑÏä§ Ï∂îÏ†Å ÏÑúÎπÑÏä§ Ï§ëÏßÄÎê®")
        } catch (e: Exception) {
            Log.e(TAG, "Î≤ÑÏä§ Î™®ÎãàÌÑ∞ÎßÅ ÏÑúÎπÑÏä§ Ï§ëÏßÄ Ïò§Î•ò: ${e.message}", e)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        monitoringJob?.cancel()
        timer.cancel()
        serviceScope.cancel()
        Log.d(TAG, "üîî BusAlertService Ï¢ÖÎ£å")
    }
}

class NotificationDismissReceiver : android.content.BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        val notificationId = intent.getIntExtra("NOTIFICATION_ID", -1)
        val stopTracking = intent.getBooleanExtra("STOP_TRACKING", false)
        
        if (notificationId != -1) {
            val busAlertService = BusAlertService.getInstance(context)
            busAlertService.cancelNotification(notificationId)
            if (stopTracking) {
                busAlertService.stopTracking()
            }
            Log.d("NotificationDismiss", "ÏïåÎ¶º ID: $notificationId Ìï¥Ï†úÎê®")
        }
    }
}

fun getNotificationChannels(context: Context): List<NotificationChannel>? {
    return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val notificationManager = 
            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.notificationChannels
    } else {
        null
    }
}